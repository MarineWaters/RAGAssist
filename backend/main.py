import os
import tempfile
from io import BytesIO
from llama_index.core import Settings, Document
from llama_index.llms.ollama import Ollama
from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from llama_index.vector_stores.qdrant import QdrantVectorStore
from llama_index.core import VectorStoreIndex, StorageContext
from llama_index.core.node_parser import SentenceSplitter
from llama_index.core import SimpleDirectoryReader
import qdrant_client
import requests
from ollama_getter import ollama_url
from pathlib import Path

OLLAMA_BASE_URL = ollama_url.rstrip('/')
MODEL_NAME = "gpt-oss:20b"

print(f"üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: {OLLAMA_BASE_URL}")
try:
    response = requests.get(f"{OLLAMA_BASE_URL}/api/tags", timeout=30)
    if response.status_code == 200:
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama")
        models_data = response.json()
        if 'models' in models_data:
            available_models = [model['name'] for model in models_data['models']]
            if MODEL_NAME not in available_models:
                print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å '{MODEL_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {available_models[0]}")
                MODEL_NAME = available_models[0]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ Ollama: {response.status_code}")
        exit(1)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    exit(1)

Settings.llm = Ollama(base_url=OLLAMA_BASE_URL, model=MODEL_NAME, request_timeout=60.0)
Settings.embed_model = HuggingFaceEmbedding(model_name="intfloat/multilingual-e5-base")
print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LlamaIndex —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã")

QDRANT_URL = "http://localhost:6333"
COLLECTION_NAME = "session_documents"

client = qdrant_client.QdrantClient(url=QDRANT_URL)
try:
    client.delete_collection(collection_name=COLLECTION_NAME)
    print("üßπ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è Qdrant –∫–æ–ª–ª–µ–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∞")
except Exception as e:
    print(f"‚ÑπÔ∏è –ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: {e}")

vector_store = QdrantVectorStore(
    client=client, 
    collection_name=COLLECTION_NAME,
    enable_hybrid=True 
)
storage_context = StorageContext.from_defaults(vector_store=vector_store)

index = VectorStoreIndex([], storage_context=storage_context, embed_model=Settings.embed_model)
print("‚úÖ –ù–æ–≤—ã–π Qdrant –∏–Ω–¥–µ–∫—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø—É—Å—Ç–æ–π)")

current_chunk_settings = {
    "chunk_size": 512,
    "chunk_overlap": 50
}


def add_pdf_to_index(pdf_bytes: bytes, filename: str, chunk_size: int = None, chunk_overlap: int = None):
    global index, current_chunk_settings
    
    if chunk_size is None:
        chunk_size = current_chunk_settings["chunk_size"]
    if chunk_overlap is None:
        chunk_overlap = current_chunk_settings["chunk_overlap"]
    
    with tempfile.TemporaryDirectory() as tmpdir:
        filepath = Path(tmpdir) / filename
        with open(filepath, "wb") as f:
            f.write(pdf_bytes)
        
        print(f"üìñ –ó–∞–≥—Ä—É–∑–∫–∞ PDF: {filename}")
        documents = SimpleDirectoryReader(input_files=[str(filepath)]).load_data()
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(documents)} —á–∞–Ω–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ {filename}")
        
        print(f"‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞–Ω–∫–æ–≤: —Ä–∞–∑–º–µ—Ä={chunk_size}, –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ={chunk_overlap}")
        
        parser = SentenceSplitter(
            chunk_size=chunk_size,
            chunk_overlap=chunk_overlap,
        )
        
        index = VectorStoreIndex.from_documents(
            documents,
            transformations=[parser],
            storage_context=storage_context,
            embed_model=Settings.embed_model
        )
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Qdrant")
        return len(documents)

def query_index(question: str):
    if not index:
        raise ValueError("–ò–Ω–¥–µ–∫—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    print(f"üîç –ó–∞–ø—Ä–æ—Å: {question}")
    query_engine = index.as_query_engine()
    response = query_engine.query(question)
    return str(response)

def get_index_stats():
    try:
        collection_info = client.get_collection(collection_name=COLLECTION_NAME)
        points_count = collection_info.points_count
        return {
            "points_count": points_count,
            "collection_name": COLLECTION_NAME,
            "status": "—Ä–∞–±–æ—Ç–∞–µ—Ç"
        }
    except Exception as e:
        return {"error": str(e), "status": "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}

def update_chunk_settings(chunk_size: int, chunk_overlap: int):
    global current_chunk_settings
    current_chunk_settings.update({
        "chunk_size": chunk_size,
        "chunk_overlap": chunk_overlap
    })
    
    print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞–Ω–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: —Ä–∞–∑–º–µ—Ä={chunk_size}, –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ={chunk_overlap}")
    
    return {
        "chunk_size": chunk_size,
        "chunk_overlap": chunk_overlap
    }

def get_current_chunk_settings():
    return current_chunk_settings